# -*- coding: utf-8 -*-
"""Inference Stunting (with widget).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r0m8N_Lj9M9MLFToRiOcrU7SWiS0LGY0
"""

!pip install onnxruntime ipywidgets

import onnxruntime as ort
import numpy as np
import ipywidgets as widgets
from IPython.display import display, clear_output

session = ort.InferenceSession('/content/drive/MyDrive/Laskar Ai/Prediksi Stunting/gbc_model.onnx')

inputs = session.get_inputs()

for i, inp in enumerate(inputs):
    print(f"Input {i}: name={inp.name}, shape={inp.shape}, type={inp.type}")

input_name = session.get_inputs()[0].name
num_features = 27

# Input Area
feature_names = [
    'Jenis kelamin', 'Usia anak (bulan)', 'Berat badan anak saat ini (kg)', 'Tinggi badan anak saat ini (cm)', 'Apakah ibu dan anak melakukan pemeriksaan setelan 40 hari kelahiran?',
    'Berat badan anak saat lahir (kg)', 'Usia anak pertama kali disapih (bulan)', 'Jumlah pemeriksaan yang dilakukan ibu saat hamil', 'Frekuensi anak makan ubi dalam 1 minggu', 'Frekuensi anak makan telur dalam 1 minggu',
    'Frekuensi anak makan ikan dalam 1 minggu', 'Frekuensi anak makan daging dalam 1 minggu', 'Frekuensi anak minum susu dalam 1 minggu', 'Frekuensi anak makan sayur dalam 1 minggu', 'Frekuensi anak makan pisang dalam 1 minggu',
    'Frekuensi anak makan pepaya dalam 1 minggu', 'Frekuensi anak makan wortel dalam 1 minggu', 'Frekuensi anak makan mangga dalam 1 minggu', 'Frekuensi anak makan mie dalam 1 minggu', 'Frekuensi anak makan fast food dalam 1 minggu',
    'Frekuensi anak minum soda dalam 1 minggu', 'Frekuensi anak makan sambal dalam 1 minggu', 'Frekuensi anak makan gorengan dalam 1 minggu', 'Frekuensi anak makan nasi dalam 1 minggu', 'Frekuensi anak makan makanan manis dalam 1 minggu',
    'Tingkat pendidikan kepala keluarga', 'Pendapatan keluarga perbulan (Rp)'
]

input_widgets = []

category_options = {
    'Jenis kelamin': ['Laki-laki', 'Perempuan'],
    'Apakah ibu dan anak melakukan pemeriksaan setelan 40 hari kelahiran?': ['Ya', 'Tidak'],
    'Tingkat pendidikan kepala keluarga': ['Tingkat SD', 'Tingkat SMP', 'Tingkat SMA', 'Pendidikan Tinggi', 'Tidak sekolah']
}

category_mapping = {
    'Jenis kelamin': {'Laki-laki': 0, 'Perempuan': 1},
    'Apakah ibu dan anak melakukan pemeriksaan setelan 40 hari kelahiran?': {'Tidak': 0, 'Ya': 1},
    'Tingkat pendidikan kepala keluarga': {'Tingkat SD': 2, 'Tingkat SMP': 4, 'Pendidikan Tinggi': 0, 'Tingkat SMA': 3, 'Tidak sekolah': 1}
}

# Input widgets
input_widgets = []
for label in feature_names:
    if label in category_options:
        widget = widgets.Dropdown(
            options=category_options[label],
            description=label,
            layout=widgets.Layout(width='600px', margin='10px 0'),
            style={'description_width': '400px'}
        )
    else:
        widget = widgets.FloatText(
            description=label,
            layout=widgets.Layout(width='600px', margin='10px 0'),
            style={'description_width': '400px'}
        )
    input_widgets.append(widget)

# Output area
output_area = widgets.Output()

target_map = {
    0: "Normal",
    1: "Stunting"
}

# Inference
def on_value_change(change):
    values = []
    for w, label in zip(input_widgets, feature_names):
        if label in category_mapping:
            values.append(category_mapping[label][w.value])
        else:
            values.append(w.value)

    input_array = np.array([values], dtype=np.float32)
    preds = session.run(None, {input_name: input_array})
    predicted_class = preds[0][0]
    predicted_prob = preds[1][0][1]

    predicted_label = target_map.get(predicted_class, "Unknown")

    with output_area:
        clear_output()
        print(f"Prediksi: {predicted_label} (kelas: {predicted_class})")
        print(f"Peluang stunting: {predicted_prob:.4f}")

# Input form
for w in input_widgets:
    w.observe(on_value_change, names='value')

display(widgets.VBox(input_widgets), output_area)