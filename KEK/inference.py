# -*- coding: utf-8 -*-
"""Inference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xaDgkABa84ipNp-narKtyisDKqH3bg4m
"""

!pip install onnxruntime

import json
import numpy as np
import onnxruntime as rt2
from datetime import datetime

# Kolom numerik dan kategorikal
numerical_columns = [
    'Umur Ibu (tahun)', 'TB (cm)', 'Jarak Hamil',
    'Tinggi Fundus Uteri (TFU)', 'Detak Jantung Janin',
    'Pemeriksaan HB', 'Panjang BBL (cm)', 'Berat BBL (gr)',
    'Sistol', 'Diastol', 'Gravida', 'Para', 'Abortus', 'Usia Kehamilan Minggu'
]

categorical_columns = [
    'Jenis Asuransi', 'IMT Sebelum Hamil', 'Status Td', 'Presentasi',
    'Gol Darah dan Rhesus', 'Rujuk Ibu Hamil', 'Faskes Rujukan', 'Konseling',
    'Komplikasi', 'Cara Persalinan', 'Tempat Bersalin', 'Penolong Persalinan',
    'Kondisi Ibu', 'Kondisi Bayi', 'Komplikasi Persalinan',
    'Rujuk Ibu Bersalin (Ya / Tidak)', 'Komplikasi Masa Nifas',
    'Rujuk Ibu Nifas', 'Kelurahan/Desa'
]

def auto_format_value(value, col_name):
    value = value.strip()
    try:
        if '-' in value:
            dt = datetime.strptime(value, "%m-%d-%Y")
            return dt.strftime("%Y-%m-%d")
    except ValueError:
        pass

    if value.lower() == "ya":
        return "Ya"
    if value.lower() == "tidak":
        return "Tidak"
    return value

def get_user_input():
    print("Masukkan data input sesuai kolom di bawah:")
    user_input = {}
    for col in numerical_columns + categorical_columns:
        val = input(f"{col}: ").strip()
        user_input[col] = auto_format_value(val, col)
    return user_input

def preprocess_input(user_input, preprocessing_params, expected_features):
    # Imputasi numerik
    means = preprocessing_params["numerical_imputer"]["mean"]
    X_num = []
    for i, col in enumerate(numerical_columns):
        val = user_input.get(col, "")
        if val == "" or val.lower() == "nan":
            X_num.append(means[i])
        else:
            try:
                X_num.append(float(val))
            except ValueError:
                print(f"[WARNING] Nilai tidak valid di kolom numerik '{col}': {val}, gunakan mean.")
                X_num.append(means[i])
    X_num = np.array(X_num).reshape(1, -1)

    # One-hot encoding kategori
    encoder_cats = preprocessing_params["categorical_encoder"]["categories"]
    X_cat = []
    for i, col in enumerate(categorical_columns):
        val = user_input.get(col, "")
        if i >= len(encoder_cats):
            print(f"[WARNING] Tidak ada kategori encoder untuk kolom '{col}'")
            continue
        valid_cats = encoder_cats[i]
        onehot = [1.0 if val == cat else 0.0 for cat in valid_cats]
        if sum(onehot) == 0:
            print(f"[WARNING] '{val}' bukan kategori valid untuk kolom '{col}'")
            onehot = [0.0] * len(valid_cats)
        X_cat.extend(onehot)

    X_cat = np.array(X_cat).reshape(1, -1)
    X = np.concatenate([X_num, X_cat], axis=1)

    # Padding/trimming agar cocok dengan input model
    if X.shape[1] < expected_features:
        pad_width = expected_features - X.shape[1]
        print(f"[INFO] Padding input dari {X.shape[1]} ke {expected_features}")
        X = np.concatenate([X, np.zeros((1, pad_width))], axis=1)
    elif X.shape[1] > expected_features:
        print(f"[INFO] Trimming input dari {X.shape[1]} ke {expected_features}")
        X = X[:, :expected_features]

    return X

def main():
    # Load preprocessing params
    with open('preprocessing_params.json', 'r') as f:
        preprocessing_params = json.load(f)

    # Load ONNX model
    sess = rt2.InferenceSession('xgb_model.onnx')
    input_name = sess.get_inputs()[0].name
    expected_features = sess.get_inputs()[0].shape[1]

    # Input pengguna
    user_input = get_user_input()
    X = preprocess_input(user_input, preprocessing_params, expected_features)

    # Prediksi dari model
    outputs = sess.run(None, {input_name: X.astype(np.float32)})
    print("\n[DEBUG] Output ONNX:", outputs)

    pred_label = int(outputs[0][0])     # Prediksi label: 0, 1, atau 2
    probs = outputs[1][0]               # Probabilitas semua kelas

    label_dict = {0: "KEK", 1: "Normal", 2: "Resiko KEK"}

    print(f"\n=== HASIL PREDIKSI STATUS GIZI: {label_dict.get(pred_label, 'Unknown')} ===")
    print("Probabilitas prediksi:", probs)

if __name__ == "__main__":
    main()